{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","className","MovieGenre","_ref3","genre","Movie","_ref","title","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA8BA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC3B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAQL,EAASC,IAAKA,EAAKK,UAAU,kBAIlD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIP,EAAAC,EAAAC,cAAA,QAAME,UAAU,gBAAgBG,EAAhC,KAoBOC,MArDf,SAAAC,GAAoD,IAAnCC,EAAmCD,EAAnCC,MAAOZ,EAA4BW,EAA5BX,OAAQa,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,SACpC,OACIZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAWA,EAASC,IAAKW,KAE1CV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACXJ,EAAAC,EAAAC,cAAA,cAAQQ,EAAR,KACAV,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACVO,EAAOE,IAAI,SAACN,EAAOO,GAAR,OAAkBd,EAAAC,EAAAC,cAACG,EAAD,CAAYE,MAAOA,EAAOQ,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBACTJ,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC0BjBC,6MA1CXC,MAAQ,KAMRC,cAAgB,WAWZ,OATeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,EAAOb,GAEzC,OADFc,QAAQC,IAAIF,GACH3B,EAAAC,EAAAC,cAAC4B,EAAD,CACPpB,MAAUiB,EAAMjB,MAChBZ,OAAW6B,EAAMI,mBACjBpB,OAAUgB,EAAMhB,OAChBC,SAAYe,EAAMf,SAClBG,IAAQY,EAAMK,UAKtBC,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAAlC,EAAAmC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXhB,EAAKiB,SAAS,CACZhB,WAHS,wBAAAW,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WAET,OAAOK,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKvB,SACvBwB,MAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,yFA7BxBP,KAAKX,8CAkCL,OAASjC,EAAAC,EAAAC,cAAA,OAAKE,UAAY,OAAjB,IAA2BwC,KAAKrB,MAAMG,OAASkB,KAAKpB,gBAAkB,UAAtE,YAvCC4B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.55aebf17.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LineEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n    return ( \r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePoster poster = { poster } alt={title}/> \r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1 > { title } </h1> \r\n                <div className=\"Movies_Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\r\n                </div>\r\n                <p className=\"Movie__Synopsis\">\r\n                    <LineEllipsis\r\n                        text={synopsis}\r\n                        maxLine='2'\r\n                        ellipsis='...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                    />\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n    return ( \r\n        <img src = { poster } alt={alt} className=\"Movie__Poster\"/>\r\n    );\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return ( \r\n        <span className=\"Movie__Genre\">{genre} </span> \r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie;\r\n// class Movie extends Component {\r\n\r\n//     static propTypes={\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string\r\n//     }\r\n\r\n//     render(){\r\n//         console.log(this.props);\r\n//         return(\r\n//             <div>\r\n//                 <h1>{this.props.title}</h1>\r\n//                 <MoviePoster poster={this.props.poster}/>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// class MoviePoster extends Component {\r\n\r\n//     static propTypes={\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n//     render() {\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"\"/>\r\n//         );\r\n//     }\r\n// }","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n    state = {}\r\n\r\n    componentDidMount() {\r\n        this._getMovies();\r\n    }\r\n\r\n    _renderMovies = () => {\r\n      \r\n        const movies = this.state.movies.map((movie, index) => {\r\n          console.log(movie)\r\n            return <Movie\r\n            title = { movie.title }\r\n            poster = { movie.medium_cover_image }\r\n            genres = {movie.genres}\r\n            synopsis = {movie.synopsis}\r\n            key = { movie.id }/>\r\n        })\r\n        return movies;\r\n    }\r\n\r\n    _getMovies = async () => {\r\n      const movies = await this._callApi()\r\n      this.setState({\r\n        movies\r\n      })\r\n    }\r\n\r\n    _callApi = () => {\r\n      // api 에서 받아오는 객체가 promise 로 넘어옴\r\n      return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\r\n      .then(response => response.json()) // 받아온 객체를 JSON 으로 바꾼 후\r\n      .then(json => json.data.movies) // 이후 console.log\r\n      .catch(err => console.log(err)) // error 가 생기면 여기서 처리\r\n    }\r\n\r\n    render() {\r\n      \r\n        return ( <div className = \"App\" > { this.state.movies ? this._renderMovies() : \"Loading\" } </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}